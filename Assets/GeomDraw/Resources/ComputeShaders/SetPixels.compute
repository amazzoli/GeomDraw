#pragma kernel ComputeRays

float XIntersection(float2 p1, float2 p2, float y)
{
    if (p2.y - p1.y == 0)
        return 0;
    else
    {
        float angCoef = (p2.y - p1.y) / (p2.x - p1.x);
        float angCoefInverse = 1 / angCoef;
        float intercept = p1.y - angCoef * p1.x;
        float interceptInverse = -intercept / angCoef;
        return angCoefInverse * y + interceptInverse;
    }
}

float YIntersection(float2 p1, float2 p2, float x)
{
    if (p2.x - p1.x == 0)
        return 0;
    else
    {
        float angCoef = (p2.y - p1.y) / (p2.x - p1.x);
        float intercept = p1.y - angCoef * p1.x;
        return angCoef * x + intercept;
    }
}

RWStructuredBuffer<int> nCrossXRays;
RWStructuredBuffer<int> nCrossYRays;
StructuredBuffer<float> shapeX;
StructuredBuffer<float> shapeY;
uint L;
uint width;
uint height;
int offsetX;
int offsetY;

[numthreads(32,1,1)]
void ComputeRays (uint3 id : SV_DispatchThreadID)
{   
    if (id.x < 0 || id.x >= L) return;

    float2 v1 = float2(shapeX[id.x], shapeY[id.x]);
    float2 v2 = float2(shapeX[(id.x + 1) % L], shapeY[(id.x + 1) % L]);
    int maxPxVertY = ceil(max(v1[1], v2[1]) - 0.5) - offsetY;
    int minPxVertY = ceil(min(v1[1], v2[1]) + 0.5) - offsetY;
    int maxPxVertX = ceil(max(v1[0], v2[0]) - 0.5) - offsetX;
    int minPxVertX = ceil(min(v1[0], v2[0]) + 0.5) - offsetX;

    for (int pvi = minPxVertY; pvi <= maxPxVertY; ++pvi)
    {
        int pvj;
        float xSide = XIntersection(v1, v2, pvi - 0.5 + offsetY);
        for (pvj = 0; pvj < minPxVertX; pvj++) nCrossXRays[pvi * (width + 1) + pvj] += 1;
        for (pvj = minPxVertX; pvj <= maxPxVertX; pvj++)
        {
            if (xSide >= pvj - 0.5 + offsetX) nCrossXRays[pvi * (width + 1) + pvj] += 1;
            else break;
        }
    }
    nCrossXRays[id.x] = shapeX[id.x];

    for (int pvj = minPxVertX; pvj <= maxPxVertX; ++pvj)
    {
        int pvi;
        float ySide = YIntersection(v1, v2, pvj - 0.5 + offsetX);
        for (pvi = 0; pvi < minPxVertY; pvi++) nCrossYRays[pvi * (width + 1) + pvj] += 1;
        for (pvi = minPxVertY; pvi <= maxPxVertY; ++pvi)
        {
            if (ySide >= pvi - 0.5 + offsetY) nCrossYRays[pvi * (width + 1) + pvj] += 1;
            else break;
        }
    }
}


#pragma kernel ComputeShade

RWStructuredBuffer<float> shades;

[numthreads(32,32,1)]
void ComputeShade (uint3 id : SV_DispatchThreadID)
{   
    uint i = id[0];
    uint j = id[1];
    uint nj = width + 1;
    if (i < 0 || i >= height || j < 0 || j >= width) return;

    if (nCrossXRays[i * nj + j] == nCrossXRays[i * nj + j + 1] && nCrossXRays[(i + 1) * nj + j] == nCrossXRays[(i + 1) * nj + j + 1] &&
        nCrossYRays[i * nj + j] == nCrossYRays[(i + 1) * nj + j] && nCrossYRays[i * nj + j + 1] == nCrossYRays[(i + 1) * nj + j + 1])
    {
        if (nCrossXRays[i * nj + j] % 2 == 0) shades[i * width + j] = 0;
        else shades[i * width + j] = 1;
    }
    else if (shades[i * width + j] == -1.0f) shades[i * width + j] = 1;
}


#pragma kernel Set

float4 ColorBlend(float4 fg, float4 bg)
{
    if (fg[3] < 1e-5)
        return bg;

    float a = 1 - (1 - fg[3]) * (1 - bg[3]);
    if (a < 1e-5)
        return float4(0, 0, 0, 0);

    float r = fg[0] * fg[3] / a + bg[0] * bg[3] * (1 - fg[3]) / a;
    float g = fg[1] * fg[3] / a + bg[1] * bg[3] * (1 - fg[3]) / a;
    float b = fg[2] * fg[3] / a + bg[2] * bg[3] * (1 - fg[3]) / a;
    return float4(r, g, b, a);
}

RWTexture2D<float4> tex;
float4 color;
uint niTex;
uint njTex;

[numthreads(32,32,1)]
void Set (uint3 id : SV_DispatchThreadID)
{
    if (id[0] < 0 || id[0] >= height || id.y < 0 || id[1] >= width) return;

    uint2 canvasJI = uint2(id[1] + offsetX, id[0] + offsetY);
    if (canvasJI[0] >= 0 && canvasJI[0] < niTex && canvasJI[1] >= 0 && canvasJI[1] < njTex)
    {
        float a = color[3] * shades[id[0] * width + id[1]];
        float4 bgColor = tex[canvasJI];
        float4 newColor = float4(color[0], color[1], color[2], a);
        tex[canvasJI] = ColorBlend(newColor, bgColor);
    }
}